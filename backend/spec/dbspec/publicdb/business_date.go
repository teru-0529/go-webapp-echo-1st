// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package publicdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BusinessDate is an object representing the database table.
type BusinessDate struct { // 業務日付区分
	BusinessDateType BusinessDateType `boil:"business_date_type" json:"business_date_type" toml:"business_date_type" yaml:"business_date_type"`
	// 現在日付
	PresentDate time.Time `boil:"present_date" json:"present_date" toml:"present_date" yaml:"present_date"`

	R *businessDateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L businessDateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BusinessDateColumns = struct {
	BusinessDateType string
	PresentDate      string
}{
	BusinessDateType: "business_date_type",
	PresentDate:      "present_date",
}

var BusinessDateTableColumns = struct {
	BusinessDateType string
	PresentDate      string
}{
	BusinessDateType: "business_date.business_date_type",
	PresentDate:      "business_date.present_date",
}

// Generated where

type whereHelperBusinessDateType struct{ field string }

func (w whereHelperBusinessDateType) EQ(x BusinessDateType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperBusinessDateType) NEQ(x BusinessDateType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperBusinessDateType) LT(x BusinessDateType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperBusinessDateType) LTE(x BusinessDateType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperBusinessDateType) GT(x BusinessDateType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperBusinessDateType) GTE(x BusinessDateType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperBusinessDateType) IN(slice []BusinessDateType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperBusinessDateType) NIN(slice []BusinessDateType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BusinessDateWhere = struct {
	BusinessDateType whereHelperBusinessDateType
	PresentDate      whereHelpertime_Time
}{
	BusinessDateType: whereHelperBusinessDateType{field: "\"business_date\".\"business_date_type\""},
	PresentDate:      whereHelpertime_Time{field: "\"business_date\".\"present_date\""},
}

// BusinessDateRels is where relationship names are stored.
var BusinessDateRels = struct {
}{}

// businessDateR is where relationships are stored.
type businessDateR struct {
}

// NewStruct creates a new relationship struct
func (*businessDateR) NewStruct() *businessDateR {
	return &businessDateR{}
}

// businessDateL is where Load methods for each relationship are stored.
type businessDateL struct{}

var (
	businessDateAllColumns            = []string{"business_date_type", "present_date"}
	businessDateColumnsWithoutDefault = []string{"business_date_type", "present_date"}
	businessDateColumnsWithDefault    = []string{}
	businessDatePrimaryKeyColumns     = []string{"business_date_type"}
	businessDateGeneratedColumns      = []string{}
)

type (
	// BusinessDateSlice is an alias for a slice of pointers to BusinessDate.
	// This should almost always be used instead of []BusinessDate.
	BusinessDateSlice []*BusinessDate
	// BusinessDateHook is the signature for custom BusinessDate hook methods
	BusinessDateHook func(context.Context, boil.ContextExecutor, *BusinessDate) error

	businessDateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	businessDateType                 = reflect.TypeOf(&BusinessDate{})
	businessDateMapping              = queries.MakeStructMapping(businessDateType)
	businessDatePrimaryKeyMapping, _ = queries.BindMapping(businessDateType, businessDateMapping, businessDatePrimaryKeyColumns)
	businessDateInsertCacheMut       sync.RWMutex
	businessDateInsertCache          = make(map[string]insertCache)
	businessDateUpdateCacheMut       sync.RWMutex
	businessDateUpdateCache          = make(map[string]updateCache)
	businessDateUpsertCacheMut       sync.RWMutex
	businessDateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var businessDateAfterSelectMu sync.Mutex
var businessDateAfterSelectHooks []BusinessDateHook

var businessDateBeforeInsertMu sync.Mutex
var businessDateBeforeInsertHooks []BusinessDateHook
var businessDateAfterInsertMu sync.Mutex
var businessDateAfterInsertHooks []BusinessDateHook

var businessDateBeforeUpdateMu sync.Mutex
var businessDateBeforeUpdateHooks []BusinessDateHook
var businessDateAfterUpdateMu sync.Mutex
var businessDateAfterUpdateHooks []BusinessDateHook

var businessDateBeforeDeleteMu sync.Mutex
var businessDateBeforeDeleteHooks []BusinessDateHook
var businessDateAfterDeleteMu sync.Mutex
var businessDateAfterDeleteHooks []BusinessDateHook

var businessDateBeforeUpsertMu sync.Mutex
var businessDateBeforeUpsertHooks []BusinessDateHook
var businessDateAfterUpsertMu sync.Mutex
var businessDateAfterUpsertHooks []BusinessDateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BusinessDate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessDateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BusinessDate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessDateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BusinessDate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessDateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BusinessDate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessDateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BusinessDate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessDateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BusinessDate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessDateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BusinessDate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessDateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BusinessDate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessDateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BusinessDate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range businessDateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBusinessDateHook registers your hook function for all future operations.
func AddBusinessDateHook(hookPoint boil.HookPoint, businessDateHook BusinessDateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		businessDateAfterSelectMu.Lock()
		businessDateAfterSelectHooks = append(businessDateAfterSelectHooks, businessDateHook)
		businessDateAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		businessDateBeforeInsertMu.Lock()
		businessDateBeforeInsertHooks = append(businessDateBeforeInsertHooks, businessDateHook)
		businessDateBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		businessDateAfterInsertMu.Lock()
		businessDateAfterInsertHooks = append(businessDateAfterInsertHooks, businessDateHook)
		businessDateAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		businessDateBeforeUpdateMu.Lock()
		businessDateBeforeUpdateHooks = append(businessDateBeforeUpdateHooks, businessDateHook)
		businessDateBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		businessDateAfterUpdateMu.Lock()
		businessDateAfterUpdateHooks = append(businessDateAfterUpdateHooks, businessDateHook)
		businessDateAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		businessDateBeforeDeleteMu.Lock()
		businessDateBeforeDeleteHooks = append(businessDateBeforeDeleteHooks, businessDateHook)
		businessDateBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		businessDateAfterDeleteMu.Lock()
		businessDateAfterDeleteHooks = append(businessDateAfterDeleteHooks, businessDateHook)
		businessDateAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		businessDateBeforeUpsertMu.Lock()
		businessDateBeforeUpsertHooks = append(businessDateBeforeUpsertHooks, businessDateHook)
		businessDateBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		businessDateAfterUpsertMu.Lock()
		businessDateAfterUpsertHooks = append(businessDateAfterUpsertHooks, businessDateHook)
		businessDateAfterUpsertMu.Unlock()
	}
}

// OneG returns a single businessDate record from the query using the global executor.
func (q businessDateQuery) OneG(ctx context.Context) (*BusinessDate, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single businessDate record from the query.
func (q businessDateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BusinessDate, error) {
	o := &BusinessDate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "publicdb: failed to execute a one query for business_date")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all BusinessDate records from the query using the global executor.
func (q businessDateQuery) AllG(ctx context.Context) (BusinessDateSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all BusinessDate records from the query.
func (q businessDateQuery) All(ctx context.Context, exec boil.ContextExecutor) (BusinessDateSlice, error) {
	var o []*BusinessDate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "publicdb: failed to assign all query results to BusinessDate slice")
	}

	if len(businessDateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all BusinessDate records in the query using the global executor
func (q businessDateQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all BusinessDate records in the query.
func (q businessDateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "publicdb: failed to count business_date rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q businessDateQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q businessDateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "publicdb: failed to check if business_date exists")
	}

	return count > 0, nil
}

// BusinessDates retrieves all the records using an executor.
func BusinessDates(mods ...qm.QueryMod) businessDateQuery {
	mods = append(mods, qm.From("\"business_date\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"business_date\".*"})
	}

	return businessDateQuery{q}
}

// FindBusinessDateG retrieves a single record by ID.
func FindBusinessDateG(ctx context.Context, businessDateType BusinessDateType, selectCols ...string) (*BusinessDate, error) {
	return FindBusinessDate(ctx, boil.GetContextDB(), businessDateType, selectCols...)
}

// FindBusinessDate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBusinessDate(ctx context.Context, exec boil.ContextExecutor, businessDateType BusinessDateType, selectCols ...string) (*BusinessDate, error) {
	businessDateObj := &BusinessDate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"business_date\" where \"business_date_type\"=$1", sel,
	)

	q := queries.Raw(query, businessDateType)

	err := q.Bind(ctx, exec, businessDateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "publicdb: unable to select from business_date")
	}

	if err = businessDateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return businessDateObj, err
	}

	return businessDateObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BusinessDate) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BusinessDate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("publicdb: no business_date provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(businessDateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	businessDateInsertCacheMut.RLock()
	cache, cached := businessDateInsertCache[key]
	businessDateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			businessDateAllColumns,
			businessDateColumnsWithDefault,
			businessDateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(businessDateType, businessDateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(businessDateType, businessDateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"business_date\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"business_date\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "publicdb: unable to insert into business_date")
	}

	if !cached {
		businessDateInsertCacheMut.Lock()
		businessDateInsertCache[key] = cache
		businessDateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single BusinessDate record using the global executor.
// See Update for more documentation.
func (o *BusinessDate) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the BusinessDate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BusinessDate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	businessDateUpdateCacheMut.RLock()
	cache, cached := businessDateUpdateCache[key]
	businessDateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			businessDateAllColumns,
			businessDatePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("publicdb: unable to update business_date, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"business_date\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, businessDatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(businessDateType, businessDateMapping, append(wl, businessDatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "publicdb: unable to update business_date row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "publicdb: failed to get rows affected by update for business_date")
	}

	if !cached {
		businessDateUpdateCacheMut.Lock()
		businessDateUpdateCache[key] = cache
		businessDateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q businessDateQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q businessDateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "publicdb: unable to update all for business_date")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "publicdb: unable to retrieve rows affected for business_date")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BusinessDateSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BusinessDateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("publicdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessDatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"business_date\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, businessDatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "publicdb: unable to update all in businessDate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "publicdb: unable to retrieve rows affected all in update all businessDate")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BusinessDate) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BusinessDate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("publicdb: no business_date provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(businessDateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	businessDateUpsertCacheMut.RLock()
	cache, cached := businessDateUpsertCache[key]
	businessDateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			businessDateAllColumns,
			businessDateColumnsWithDefault,
			businessDateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			businessDateAllColumns,
			businessDatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("publicdb: unable to upsert business_date, could not build update column list")
		}

		ret := strmangle.SetComplement(businessDateAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(businessDatePrimaryKeyColumns) == 0 {
				return errors.New("publicdb: unable to upsert business_date, could not build conflict column list")
			}

			conflict = make([]string, len(businessDatePrimaryKeyColumns))
			copy(conflict, businessDatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"business_date\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(businessDateType, businessDateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(businessDateType, businessDateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "publicdb: unable to upsert business_date")
	}

	if !cached {
		businessDateUpsertCacheMut.Lock()
		businessDateUpsertCache[key] = cache
		businessDateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single BusinessDate record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BusinessDate) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single BusinessDate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BusinessDate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("publicdb: no BusinessDate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), businessDatePrimaryKeyMapping)
	sql := "DELETE FROM \"business_date\" WHERE \"business_date_type\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "publicdb: unable to delete from business_date")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "publicdb: failed to get rows affected by delete for business_date")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q businessDateQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q businessDateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("publicdb: no businessDateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "publicdb: unable to delete all from business_date")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "publicdb: failed to get rows affected by deleteall for business_date")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BusinessDateSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BusinessDateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(businessDateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessDatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"business_date\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, businessDatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "publicdb: unable to delete all from businessDate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "publicdb: failed to get rows affected by deleteall for business_date")
	}

	if len(businessDateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BusinessDate) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("publicdb: no BusinessDate provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BusinessDate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBusinessDate(ctx, exec, o.BusinessDateType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BusinessDateSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("publicdb: empty BusinessDateSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BusinessDateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BusinessDateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessDatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"business_date\".* FROM \"business_date\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, businessDatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "publicdb: unable to reload all in BusinessDateSlice")
	}

	*o = slice

	return nil
}

// BusinessDateExistsG checks if the BusinessDate row exists.
func BusinessDateExistsG(ctx context.Context, businessDateType BusinessDateType) (bool, error) {
	return BusinessDateExists(ctx, boil.GetContextDB(), businessDateType)
}

// BusinessDateExists checks if the BusinessDate row exists.
func BusinessDateExists(ctx context.Context, exec boil.ContextExecutor, businessDateType BusinessDateType) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"business_date\" where \"business_date_type\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessDateType)
	}
	row := exec.QueryRowContext(ctx, sql, businessDateType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "publicdb: unable to check if business_date exists")
	}

	return exists, nil
}

// Exists checks if the BusinessDate row exists.
func (o *BusinessDate) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BusinessDateExists(ctx, exec, o.BusinessDateType)
}

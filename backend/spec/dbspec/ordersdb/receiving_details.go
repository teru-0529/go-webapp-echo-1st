// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package ordersdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ReceivingDetail is an object representing the database table.
type ReceivingDetail struct { // 受注番号
	OrderNo string `boil:"order_no" json:"order_no" toml:"order_no" yaml:"order_no"`
	// 商品ID
	ProductID string `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	// 受注数
	ReceivingQuantity int `boil:"receiving_quantity" json:"receiving_quantity" toml:"receiving_quantity" yaml:"receiving_quantity"`
	// 出荷数
	ShippingQuantity int `boil:"shipping_quantity" json:"shipping_quantity" toml:"shipping_quantity" yaml:"shipping_quantity"`
	// キャンセル数
	CancelQuantity int `boil:"cancel_quantity" json:"cancel_quantity" toml:"cancel_quantity" yaml:"cancel_quantity"`
	// 受注残数
	RemainingQuantity int `boil:"remaining_quantity" json:"remaining_quantity" toml:"remaining_quantity" yaml:"remaining_quantity"`
	// 販売単価
	SelllingPrice int `boil:"sellling_price" json:"sellling_price" toml:"sellling_price" yaml:"sellling_price"`
	// 商品原価
	CostPrice int `boil:"cost_price" json:"cost_price" toml:"cost_price" yaml:"cost_price"`
	// 利益率
	ProfitRate types.Decimal `boil:"profit_rate" json:"profit_rate" toml:"profit_rate" yaml:"profit_rate"`
	// 受注ステータス
	OrderStatus OrderStatus `boil:"order_status" json:"order_status" toml:"order_status" yaml:"order_status"`
	// 作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// 更新日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// 作成者
	CreatedBy null.String `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	// 更新者
	UpdatedBy null.String `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`

	R *receivingDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L receivingDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReceivingDetailColumns = struct {
	OrderNo           string
	ProductID         string
	ReceivingQuantity string
	ShippingQuantity  string
	CancelQuantity    string
	RemainingQuantity string
	SelllingPrice     string
	CostPrice         string
	ProfitRate        string
	OrderStatus       string
	CreatedAt         string
	UpdatedAt         string
	CreatedBy         string
	UpdatedBy         string
}{
	OrderNo:           "order_no",
	ProductID:         "product_id",
	ReceivingQuantity: "receiving_quantity",
	ShippingQuantity:  "shipping_quantity",
	CancelQuantity:    "cancel_quantity",
	RemainingQuantity: "remaining_quantity",
	SelllingPrice:     "sellling_price",
	CostPrice:         "cost_price",
	ProfitRate:        "profit_rate",
	OrderStatus:       "order_status",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	CreatedBy:         "created_by",
	UpdatedBy:         "updated_by",
}

var ReceivingDetailTableColumns = struct {
	OrderNo           string
	ProductID         string
	ReceivingQuantity string
	ShippingQuantity  string
	CancelQuantity    string
	RemainingQuantity string
	SelllingPrice     string
	CostPrice         string
	ProfitRate        string
	OrderStatus       string
	CreatedAt         string
	UpdatedAt         string
	CreatedBy         string
	UpdatedBy         string
}{
	OrderNo:           "receiving_details.order_no",
	ProductID:         "receiving_details.product_id",
	ReceivingQuantity: "receiving_details.receiving_quantity",
	ShippingQuantity:  "receiving_details.shipping_quantity",
	CancelQuantity:    "receiving_details.cancel_quantity",
	RemainingQuantity: "receiving_details.remaining_quantity",
	SelllingPrice:     "receiving_details.sellling_price",
	CostPrice:         "receiving_details.cost_price",
	ProfitRate:        "receiving_details.profit_rate",
	OrderStatus:       "receiving_details.order_status",
	CreatedAt:         "receiving_details.created_at",
	UpdatedAt:         "receiving_details.updated_at",
	CreatedBy:         "receiving_details.created_by",
	UpdatedBy:         "receiving_details.updated_by",
}

// Generated where

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperOrderStatus struct{ field string }

func (w whereHelperOrderStatus) EQ(x OrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperOrderStatus) NEQ(x OrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperOrderStatus) LT(x OrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperOrderStatus) LTE(x OrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperOrderStatus) GT(x OrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperOrderStatus) GTE(x OrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperOrderStatus) IN(slice []OrderStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperOrderStatus) NIN(slice []OrderStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ReceivingDetailWhere = struct {
	OrderNo           whereHelperstring
	ProductID         whereHelperstring
	ReceivingQuantity whereHelperint
	ShippingQuantity  whereHelperint
	CancelQuantity    whereHelperint
	RemainingQuantity whereHelperint
	SelllingPrice     whereHelperint
	CostPrice         whereHelperint
	ProfitRate        whereHelpertypes_Decimal
	OrderStatus       whereHelperOrderStatus
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
	CreatedBy         whereHelpernull_String
	UpdatedBy         whereHelpernull_String
}{
	OrderNo:           whereHelperstring{field: "\"orders\".\"receiving_details\".\"order_no\""},
	ProductID:         whereHelperstring{field: "\"orders\".\"receiving_details\".\"product_id\""},
	ReceivingQuantity: whereHelperint{field: "\"orders\".\"receiving_details\".\"receiving_quantity\""},
	ShippingQuantity:  whereHelperint{field: "\"orders\".\"receiving_details\".\"shipping_quantity\""},
	CancelQuantity:    whereHelperint{field: "\"orders\".\"receiving_details\".\"cancel_quantity\""},
	RemainingQuantity: whereHelperint{field: "\"orders\".\"receiving_details\".\"remaining_quantity\""},
	SelllingPrice:     whereHelperint{field: "\"orders\".\"receiving_details\".\"sellling_price\""},
	CostPrice:         whereHelperint{field: "\"orders\".\"receiving_details\".\"cost_price\""},
	ProfitRate:        whereHelpertypes_Decimal{field: "\"orders\".\"receiving_details\".\"profit_rate\""},
	OrderStatus:       whereHelperOrderStatus{field: "\"orders\".\"receiving_details\".\"order_status\""},
	CreatedAt:         whereHelpertime_Time{field: "\"orders\".\"receiving_details\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"orders\".\"receiving_details\".\"updated_at\""},
	CreatedBy:         whereHelpernull_String{field: "\"orders\".\"receiving_details\".\"created_by\""},
	UpdatedBy:         whereHelpernull_String{field: "\"orders\".\"receiving_details\".\"updated_by\""},
}

// ReceivingDetailRels is where relationship names are stored.
var ReceivingDetailRels = struct {
	OrderNoReceiving string
	Product          string
}{
	OrderNoReceiving: "OrderNoReceiving",
	Product:          "Product",
}

// receivingDetailR is where relationships are stored.
type receivingDetailR struct {
	OrderNoReceiving *Receiving `boil:"OrderNoReceiving" json:"OrderNoReceiving" toml:"OrderNoReceiving" yaml:"OrderNoReceiving"`
	Product          *Product   `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
}

// NewStruct creates a new relationship struct
func (*receivingDetailR) NewStruct() *receivingDetailR {
	return &receivingDetailR{}
}

func (r *receivingDetailR) GetOrderNoReceiving() *Receiving {
	if r == nil {
		return nil
	}
	return r.OrderNoReceiving
}

func (r *receivingDetailR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

// receivingDetailL is where Load methods for each relationship are stored.
type receivingDetailL struct{}

var (
	receivingDetailAllColumns            = []string{"order_no", "product_id", "receiving_quantity", "shipping_quantity", "cancel_quantity", "remaining_quantity", "sellling_price", "cost_price", "profit_rate", "order_status", "created_at", "updated_at", "created_by", "updated_by"}
	receivingDetailColumnsWithoutDefault = []string{"order_no", "product_id"}
	receivingDetailColumnsWithDefault    = []string{"receiving_quantity", "shipping_quantity", "cancel_quantity", "remaining_quantity", "sellling_price", "cost_price", "profit_rate", "order_status", "created_at", "updated_at", "created_by", "updated_by"}
	receivingDetailPrimaryKeyColumns     = []string{"order_no", "product_id"}
	receivingDetailGeneratedColumns      = []string{}
)

type (
	// ReceivingDetailSlice is an alias for a slice of pointers to ReceivingDetail.
	// This should almost always be used instead of []ReceivingDetail.
	ReceivingDetailSlice []*ReceivingDetail
	// ReceivingDetailHook is the signature for custom ReceivingDetail hook methods
	ReceivingDetailHook func(context.Context, boil.ContextExecutor, *ReceivingDetail) error

	receivingDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	receivingDetailType                 = reflect.TypeOf(&ReceivingDetail{})
	receivingDetailMapping              = queries.MakeStructMapping(receivingDetailType)
	receivingDetailPrimaryKeyMapping, _ = queries.BindMapping(receivingDetailType, receivingDetailMapping, receivingDetailPrimaryKeyColumns)
	receivingDetailInsertCacheMut       sync.RWMutex
	receivingDetailInsertCache          = make(map[string]insertCache)
	receivingDetailUpdateCacheMut       sync.RWMutex
	receivingDetailUpdateCache          = make(map[string]updateCache)
	receivingDetailUpsertCacheMut       sync.RWMutex
	receivingDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var receivingDetailAfterSelectMu sync.Mutex
var receivingDetailAfterSelectHooks []ReceivingDetailHook

var receivingDetailBeforeInsertMu sync.Mutex
var receivingDetailBeforeInsertHooks []ReceivingDetailHook
var receivingDetailAfterInsertMu sync.Mutex
var receivingDetailAfterInsertHooks []ReceivingDetailHook

var receivingDetailBeforeUpdateMu sync.Mutex
var receivingDetailBeforeUpdateHooks []ReceivingDetailHook
var receivingDetailAfterUpdateMu sync.Mutex
var receivingDetailAfterUpdateHooks []ReceivingDetailHook

var receivingDetailBeforeDeleteMu sync.Mutex
var receivingDetailBeforeDeleteHooks []ReceivingDetailHook
var receivingDetailAfterDeleteMu sync.Mutex
var receivingDetailAfterDeleteHooks []ReceivingDetailHook

var receivingDetailBeforeUpsertMu sync.Mutex
var receivingDetailBeforeUpsertHooks []ReceivingDetailHook
var receivingDetailAfterUpsertMu sync.Mutex
var receivingDetailAfterUpsertHooks []ReceivingDetailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReceivingDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receivingDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReceivingDetail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receivingDetailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReceivingDetail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receivingDetailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReceivingDetail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receivingDetailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReceivingDetail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receivingDetailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReceivingDetail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receivingDetailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReceivingDetail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receivingDetailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReceivingDetail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receivingDetailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReceivingDetail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receivingDetailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReceivingDetailHook registers your hook function for all future operations.
func AddReceivingDetailHook(hookPoint boil.HookPoint, receivingDetailHook ReceivingDetailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		receivingDetailAfterSelectMu.Lock()
		receivingDetailAfterSelectHooks = append(receivingDetailAfterSelectHooks, receivingDetailHook)
		receivingDetailAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		receivingDetailBeforeInsertMu.Lock()
		receivingDetailBeforeInsertHooks = append(receivingDetailBeforeInsertHooks, receivingDetailHook)
		receivingDetailBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		receivingDetailAfterInsertMu.Lock()
		receivingDetailAfterInsertHooks = append(receivingDetailAfterInsertHooks, receivingDetailHook)
		receivingDetailAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		receivingDetailBeforeUpdateMu.Lock()
		receivingDetailBeforeUpdateHooks = append(receivingDetailBeforeUpdateHooks, receivingDetailHook)
		receivingDetailBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		receivingDetailAfterUpdateMu.Lock()
		receivingDetailAfterUpdateHooks = append(receivingDetailAfterUpdateHooks, receivingDetailHook)
		receivingDetailAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		receivingDetailBeforeDeleteMu.Lock()
		receivingDetailBeforeDeleteHooks = append(receivingDetailBeforeDeleteHooks, receivingDetailHook)
		receivingDetailBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		receivingDetailAfterDeleteMu.Lock()
		receivingDetailAfterDeleteHooks = append(receivingDetailAfterDeleteHooks, receivingDetailHook)
		receivingDetailAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		receivingDetailBeforeUpsertMu.Lock()
		receivingDetailBeforeUpsertHooks = append(receivingDetailBeforeUpsertHooks, receivingDetailHook)
		receivingDetailBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		receivingDetailAfterUpsertMu.Lock()
		receivingDetailAfterUpsertHooks = append(receivingDetailAfterUpsertHooks, receivingDetailHook)
		receivingDetailAfterUpsertMu.Unlock()
	}
}

// OneG returns a single receivingDetail record from the query using the global executor.
func (q receivingDetailQuery) OneG(ctx context.Context) (*ReceivingDetail, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single receivingDetail record from the query.
func (q receivingDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReceivingDetail, error) {
	o := &ReceivingDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "ordersdb: failed to execute a one query for receiving_details")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ReceivingDetail records from the query using the global executor.
func (q receivingDetailQuery) AllG(ctx context.Context) (ReceivingDetailSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ReceivingDetail records from the query.
func (q receivingDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReceivingDetailSlice, error) {
	var o []*ReceivingDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "ordersdb: failed to assign all query results to ReceivingDetail slice")
	}

	if len(receivingDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ReceivingDetail records in the query using the global executor
func (q receivingDetailQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ReceivingDetail records in the query.
func (q receivingDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: failed to count receiving_details rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q receivingDetailQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q receivingDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "ordersdb: failed to check if receiving_details exists")
	}

	return count > 0, nil
}

// OrderNoReceiving pointed to by the foreign key.
func (o *ReceivingDetail) OrderNoReceiving(mods ...qm.QueryMod) receivingQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"order_no\" = ?", o.OrderNo),
	}

	queryMods = append(queryMods, mods...)

	return Receivings(queryMods...)
}

// Product pointed to by the foreign key.
func (o *ReceivingDetail) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"product_id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// LoadOrderNoReceiving allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (receivingDetailL) LoadOrderNoReceiving(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReceivingDetail interface{}, mods queries.Applicator) error {
	var slice []*ReceivingDetail
	var object *ReceivingDetail

	if singular {
		var ok bool
		object, ok = maybeReceivingDetail.(*ReceivingDetail)
		if !ok {
			object = new(ReceivingDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReceivingDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReceivingDetail))
			}
		}
	} else {
		s, ok := maybeReceivingDetail.(*[]*ReceivingDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReceivingDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReceivingDetail))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &receivingDetailR{}
		}
		args[object.OrderNo] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &receivingDetailR{}
			}

			args[obj.OrderNo] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders.receivings`),
		qm.WhereIn(`orders.receivings.order_no in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Receiving")
	}

	var resultSlice []*Receiving
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Receiving")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for receivings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for receivings")
	}

	if len(receivingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderNoReceiving = foreign
		if foreign.R == nil {
			foreign.R = &receivingR{}
		}
		foreign.R.OrderNoReceivingDetails = append(foreign.R.OrderNoReceivingDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderNo == foreign.OrderNo {
				local.R.OrderNoReceiving = foreign
				if foreign.R == nil {
					foreign.R = &receivingR{}
				}
				foreign.R.OrderNoReceivingDetails = append(foreign.R.OrderNoReceivingDetails, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (receivingDetailL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReceivingDetail interface{}, mods queries.Applicator) error {
	var slice []*ReceivingDetail
	var object *ReceivingDetail

	if singular {
		var ok bool
		object, ok = maybeReceivingDetail.(*ReceivingDetail)
		if !ok {
			object = new(ReceivingDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReceivingDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReceivingDetail))
			}
		}
	} else {
		s, ok := maybeReceivingDetail.(*[]*ReceivingDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReceivingDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReceivingDetail))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &receivingDetailR{}
		}
		args[object.ProductID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &receivingDetailR{}
			}

			args[obj.ProductID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders.products`),
		qm.WhereIn(`orders.products.product_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ReceivingDetails = append(foreign.R.ReceivingDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ProductID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ReceivingDetails = append(foreign.R.ReceivingDetails, local)
				break
			}
		}
	}

	return nil
}

// SetOrderNoReceivingG of the receivingDetail to the related item.
// Sets o.R.OrderNoReceiving to related.
// Adds o to related.R.OrderNoReceivingDetails.
// Uses the global database handle.
func (o *ReceivingDetail) SetOrderNoReceivingG(ctx context.Context, insert bool, related *Receiving) error {
	return o.SetOrderNoReceiving(ctx, boil.GetContextDB(), insert, related)
}

// SetOrderNoReceiving of the receivingDetail to the related item.
// Sets o.R.OrderNoReceiving to related.
// Adds o to related.R.OrderNoReceivingDetails.
func (o *ReceivingDetail) SetOrderNoReceiving(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Receiving) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\".\"receiving_details\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_no"}),
		strmangle.WhereClause("\"", "\"", 2, receivingDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderNo, o.OrderNo, o.ProductID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderNo = related.OrderNo
	if o.R == nil {
		o.R = &receivingDetailR{
			OrderNoReceiving: related,
		}
	} else {
		o.R.OrderNoReceiving = related
	}

	if related.R == nil {
		related.R = &receivingR{
			OrderNoReceivingDetails: ReceivingDetailSlice{o},
		}
	} else {
		related.R.OrderNoReceivingDetails = append(related.R.OrderNoReceivingDetails, o)
	}

	return nil
}

// SetProductG of the receivingDetail to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ReceivingDetails.
// Uses the global database handle.
func (o *ReceivingDetail) SetProductG(ctx context.Context, insert bool, related *Product) error {
	return o.SetProduct(ctx, boil.GetContextDB(), insert, related)
}

// SetProduct of the receivingDetail to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ReceivingDetails.
func (o *ReceivingDetail) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\".\"receiving_details\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, receivingDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductID, o.OrderNo, o.ProductID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ProductID
	if o.R == nil {
		o.R = &receivingDetailR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ReceivingDetails: ReceivingDetailSlice{o},
		}
	} else {
		related.R.ReceivingDetails = append(related.R.ReceivingDetails, o)
	}

	return nil
}

// ReceivingDetails retrieves all the records using an executor.
func ReceivingDetails(mods ...qm.QueryMod) receivingDetailQuery {
	mods = append(mods, qm.From("\"orders\".\"receiving_details\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"orders\".\"receiving_details\".*"})
	}

	return receivingDetailQuery{q}
}

// FindReceivingDetailG retrieves a single record by ID.
func FindReceivingDetailG(ctx context.Context, orderNo string, productID string, selectCols ...string) (*ReceivingDetail, error) {
	return FindReceivingDetail(ctx, boil.GetContextDB(), orderNo, productID, selectCols...)
}

// FindReceivingDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReceivingDetail(ctx context.Context, exec boil.ContextExecutor, orderNo string, productID string, selectCols ...string) (*ReceivingDetail, error) {
	receivingDetailObj := &ReceivingDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"orders\".\"receiving_details\" where \"order_no\"=$1 AND \"product_id\"=$2", sel,
	)

	q := queries.Raw(query, orderNo, productID)

	err := q.Bind(ctx, exec, receivingDetailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "ordersdb: unable to select from receiving_details")
	}

	if err = receivingDetailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return receivingDetailObj, err
	}

	return receivingDetailObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ReceivingDetail) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReceivingDetail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("ordersdb: no receiving_details provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(receivingDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	receivingDetailInsertCacheMut.RLock()
	cache, cached := receivingDetailInsertCache[key]
	receivingDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			receivingDetailAllColumns,
			receivingDetailColumnsWithDefault,
			receivingDetailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(receivingDetailType, receivingDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(receivingDetailType, receivingDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"orders\".\"receiving_details\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"orders\".\"receiving_details\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "ordersdb: unable to insert into receiving_details")
	}

	if !cached {
		receivingDetailInsertCacheMut.Lock()
		receivingDetailInsertCache[key] = cache
		receivingDetailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ReceivingDetail record using the global executor.
// See Update for more documentation.
func (o *ReceivingDetail) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ReceivingDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReceivingDetail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	receivingDetailUpdateCacheMut.RLock()
	cache, cached := receivingDetailUpdateCache[key]
	receivingDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			receivingDetailAllColumns,
			receivingDetailPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("ordersdb: unable to update receiving_details, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"orders\".\"receiving_details\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, receivingDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(receivingDetailType, receivingDetailMapping, append(wl, receivingDetailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to update receiving_details row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: failed to get rows affected by update for receiving_details")
	}

	if !cached {
		receivingDetailUpdateCacheMut.Lock()
		receivingDetailUpdateCache[key] = cache
		receivingDetailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q receivingDetailQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q receivingDetailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to update all for receiving_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to retrieve rows affected for receiving_details")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ReceivingDetailSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReceivingDetailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("ordersdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), receivingDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"orders\".\"receiving_details\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, receivingDetailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to update all in receivingDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to retrieve rows affected all in update all receivingDetail")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ReceivingDetail) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReceivingDetail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("ordersdb: no receiving_details provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(receivingDetailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	receivingDetailUpsertCacheMut.RLock()
	cache, cached := receivingDetailUpsertCache[key]
	receivingDetailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			receivingDetailAllColumns,
			receivingDetailColumnsWithDefault,
			receivingDetailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			receivingDetailAllColumns,
			receivingDetailPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("ordersdb: unable to upsert receiving_details, could not build update column list")
		}

		ret := strmangle.SetComplement(receivingDetailAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(receivingDetailPrimaryKeyColumns) == 0 {
				return errors.New("ordersdb: unable to upsert receiving_details, could not build conflict column list")
			}

			conflict = make([]string, len(receivingDetailPrimaryKeyColumns))
			copy(conflict, receivingDetailPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"orders\".\"receiving_details\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(receivingDetailType, receivingDetailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(receivingDetailType, receivingDetailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "ordersdb: unable to upsert receiving_details")
	}

	if !cached {
		receivingDetailUpsertCacheMut.Lock()
		receivingDetailUpsertCache[key] = cache
		receivingDetailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ReceivingDetail record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ReceivingDetail) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ReceivingDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReceivingDetail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("ordersdb: no ReceivingDetail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), receivingDetailPrimaryKeyMapping)
	sql := "DELETE FROM \"orders\".\"receiving_details\" WHERE \"order_no\"=$1 AND \"product_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to delete from receiving_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: failed to get rows affected by delete for receiving_details")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q receivingDetailQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q receivingDetailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("ordersdb: no receivingDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to delete all from receiving_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: failed to get rows affected by deleteall for receiving_details")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ReceivingDetailSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReceivingDetailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(receivingDetailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), receivingDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"orders\".\"receiving_details\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, receivingDetailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to delete all from receivingDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: failed to get rows affected by deleteall for receiving_details")
	}

	if len(receivingDetailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ReceivingDetail) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("ordersdb: no ReceivingDetail provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReceivingDetail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReceivingDetail(ctx, exec, o.OrderNo, o.ProductID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReceivingDetailSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("ordersdb: empty ReceivingDetailSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReceivingDetailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReceivingDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), receivingDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"orders\".\"receiving_details\".* FROM \"orders\".\"receiving_details\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, receivingDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "ordersdb: unable to reload all in ReceivingDetailSlice")
	}

	*o = slice

	return nil
}

// ReceivingDetailExistsG checks if the ReceivingDetail row exists.
func ReceivingDetailExistsG(ctx context.Context, orderNo string, productID string) (bool, error) {
	return ReceivingDetailExists(ctx, boil.GetContextDB(), orderNo, productID)
}

// ReceivingDetailExists checks if the ReceivingDetail row exists.
func ReceivingDetailExists(ctx context.Context, exec boil.ContextExecutor, orderNo string, productID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"orders\".\"receiving_details\" where \"order_no\"=$1 AND \"product_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, orderNo, productID)
	}
	row := exec.QueryRowContext(ctx, sql, orderNo, productID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "ordersdb: unable to check if receiving_details exists")
	}

	return exists, nil
}

// Exists checks if the ReceivingDetail row exists.
func (o *ReceivingDetail) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReceivingDetailExists(ctx, exec, o.OrderNo, o.ProductID)
}

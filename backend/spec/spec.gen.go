// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

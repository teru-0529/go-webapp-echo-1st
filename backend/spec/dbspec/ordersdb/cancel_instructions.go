// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package ordersdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CancelInstruction is an object representing the database table.
type CancelInstruction struct { // キャンセルNO
	CancelNo int `boil:"cancel_no" json:"cancel_no" toml:"cancel_no" yaml:"cancel_no"`
	// 受注番号
	OrderNo string `boil:"order_no" json:"order_no" toml:"order_no" yaml:"order_no"`
	// 商品ID
	ProductID string `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	// キャンセル日
	CancelDate time.Time `boil:"cancel_date" json:"cancel_date" toml:"cancel_date" yaml:"cancel_date"`
	// 処理担当者名
	OperatorName string `boil:"operator_name" json:"operator_name" toml:"operator_name" yaml:"operator_name"`
	// キャンセル数
	CancelQuantity int `boil:"cancel_quantity" json:"cancel_quantity" toml:"cancel_quantity" yaml:"cancel_quantity"`
	// キャンセル理由
	CancelReason null.String `boil:"cancel_reason" json:"cancel_reason,omitempty" toml:"cancel_reason" yaml:"cancel_reason,omitempty"`
	// 作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// 更新日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// 作成者
	CreatedBy null.String `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	// 更新者
	UpdatedBy null.String `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`

	R *cancelInstructionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cancelInstructionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CancelInstructionColumns = struct {
	CancelNo       string
	OrderNo        string
	ProductID      string
	CancelDate     string
	OperatorName   string
	CancelQuantity string
	CancelReason   string
	CreatedAt      string
	UpdatedAt      string
	CreatedBy      string
	UpdatedBy      string
}{
	CancelNo:       "cancel_no",
	OrderNo:        "order_no",
	ProductID:      "product_id",
	CancelDate:     "cancel_date",
	OperatorName:   "operator_name",
	CancelQuantity: "cancel_quantity",
	CancelReason:   "cancel_reason",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	CreatedBy:      "created_by",
	UpdatedBy:      "updated_by",
}

var CancelInstructionTableColumns = struct {
	CancelNo       string
	OrderNo        string
	ProductID      string
	CancelDate     string
	OperatorName   string
	CancelQuantity string
	CancelReason   string
	CreatedAt      string
	UpdatedAt      string
	CreatedBy      string
	UpdatedBy      string
}{
	CancelNo:       "cancel_instructions.cancel_no",
	OrderNo:        "cancel_instructions.order_no",
	ProductID:      "cancel_instructions.product_id",
	CancelDate:     "cancel_instructions.cancel_date",
	OperatorName:   "cancel_instructions.operator_name",
	CancelQuantity: "cancel_instructions.cancel_quantity",
	CancelReason:   "cancel_instructions.cancel_reason",
	CreatedAt:      "cancel_instructions.created_at",
	UpdatedAt:      "cancel_instructions.updated_at",
	CreatedBy:      "cancel_instructions.created_by",
	UpdatedBy:      "cancel_instructions.updated_by",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CancelInstructionWhere = struct {
	CancelNo       whereHelperint
	OrderNo        whereHelperstring
	ProductID      whereHelperstring
	CancelDate     whereHelpertime_Time
	OperatorName   whereHelperstring
	CancelQuantity whereHelperint
	CancelReason   whereHelpernull_String
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	CreatedBy      whereHelpernull_String
	UpdatedBy      whereHelpernull_String
}{
	CancelNo:       whereHelperint{field: "\"orders\".\"cancel_instructions\".\"cancel_no\""},
	OrderNo:        whereHelperstring{field: "\"orders\".\"cancel_instructions\".\"order_no\""},
	ProductID:      whereHelperstring{field: "\"orders\".\"cancel_instructions\".\"product_id\""},
	CancelDate:     whereHelpertime_Time{field: "\"orders\".\"cancel_instructions\".\"cancel_date\""},
	OperatorName:   whereHelperstring{field: "\"orders\".\"cancel_instructions\".\"operator_name\""},
	CancelQuantity: whereHelperint{field: "\"orders\".\"cancel_instructions\".\"cancel_quantity\""},
	CancelReason:   whereHelpernull_String{field: "\"orders\".\"cancel_instructions\".\"cancel_reason\""},
	CreatedAt:      whereHelpertime_Time{field: "\"orders\".\"cancel_instructions\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"orders\".\"cancel_instructions\".\"updated_at\""},
	CreatedBy:      whereHelpernull_String{field: "\"orders\".\"cancel_instructions\".\"created_by\""},
	UpdatedBy:      whereHelpernull_String{field: "\"orders\".\"cancel_instructions\".\"updated_by\""},
}

// CancelInstructionRels is where relationship names are stored.
var CancelInstructionRels = struct {
}{}

// cancelInstructionR is where relationships are stored.
type cancelInstructionR struct {
}

// NewStruct creates a new relationship struct
func (*cancelInstructionR) NewStruct() *cancelInstructionR {
	return &cancelInstructionR{}
}

// cancelInstructionL is where Load methods for each relationship are stored.
type cancelInstructionL struct{}

var (
	cancelInstructionAllColumns            = []string{"cancel_no", "order_no", "product_id", "cancel_date", "operator_name", "cancel_quantity", "cancel_reason", "created_at", "updated_at", "created_by", "updated_by"}
	cancelInstructionColumnsWithoutDefault = []string{"order_no", "product_id", "operator_name"}
	cancelInstructionColumnsWithDefault    = []string{"cancel_no", "cancel_date", "cancel_quantity", "cancel_reason", "created_at", "updated_at", "created_by", "updated_by"}
	cancelInstructionPrimaryKeyColumns     = []string{"cancel_no"}
	cancelInstructionGeneratedColumns      = []string{}
)

type (
	// CancelInstructionSlice is an alias for a slice of pointers to CancelInstruction.
	// This should almost always be used instead of []CancelInstruction.
	CancelInstructionSlice []*CancelInstruction
	// CancelInstructionHook is the signature for custom CancelInstruction hook methods
	CancelInstructionHook func(context.Context, boil.ContextExecutor, *CancelInstruction) error

	cancelInstructionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cancelInstructionType                 = reflect.TypeOf(&CancelInstruction{})
	cancelInstructionMapping              = queries.MakeStructMapping(cancelInstructionType)
	cancelInstructionPrimaryKeyMapping, _ = queries.BindMapping(cancelInstructionType, cancelInstructionMapping, cancelInstructionPrimaryKeyColumns)
	cancelInstructionInsertCacheMut       sync.RWMutex
	cancelInstructionInsertCache          = make(map[string]insertCache)
	cancelInstructionUpdateCacheMut       sync.RWMutex
	cancelInstructionUpdateCache          = make(map[string]updateCache)
	cancelInstructionUpsertCacheMut       sync.RWMutex
	cancelInstructionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cancelInstructionAfterSelectMu sync.Mutex
var cancelInstructionAfterSelectHooks []CancelInstructionHook

var cancelInstructionBeforeInsertMu sync.Mutex
var cancelInstructionBeforeInsertHooks []CancelInstructionHook
var cancelInstructionAfterInsertMu sync.Mutex
var cancelInstructionAfterInsertHooks []CancelInstructionHook

var cancelInstructionBeforeUpdateMu sync.Mutex
var cancelInstructionBeforeUpdateHooks []CancelInstructionHook
var cancelInstructionAfterUpdateMu sync.Mutex
var cancelInstructionAfterUpdateHooks []CancelInstructionHook

var cancelInstructionBeforeDeleteMu sync.Mutex
var cancelInstructionBeforeDeleteHooks []CancelInstructionHook
var cancelInstructionAfterDeleteMu sync.Mutex
var cancelInstructionAfterDeleteHooks []CancelInstructionHook

var cancelInstructionBeforeUpsertMu sync.Mutex
var cancelInstructionBeforeUpsertHooks []CancelInstructionHook
var cancelInstructionAfterUpsertMu sync.Mutex
var cancelInstructionAfterUpsertHooks []CancelInstructionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CancelInstruction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cancelInstructionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CancelInstruction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cancelInstructionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CancelInstruction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cancelInstructionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CancelInstruction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cancelInstructionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CancelInstruction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cancelInstructionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CancelInstruction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cancelInstructionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CancelInstruction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cancelInstructionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CancelInstruction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cancelInstructionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CancelInstruction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cancelInstructionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCancelInstructionHook registers your hook function for all future operations.
func AddCancelInstructionHook(hookPoint boil.HookPoint, cancelInstructionHook CancelInstructionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cancelInstructionAfterSelectMu.Lock()
		cancelInstructionAfterSelectHooks = append(cancelInstructionAfterSelectHooks, cancelInstructionHook)
		cancelInstructionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		cancelInstructionBeforeInsertMu.Lock()
		cancelInstructionBeforeInsertHooks = append(cancelInstructionBeforeInsertHooks, cancelInstructionHook)
		cancelInstructionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		cancelInstructionAfterInsertMu.Lock()
		cancelInstructionAfterInsertHooks = append(cancelInstructionAfterInsertHooks, cancelInstructionHook)
		cancelInstructionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		cancelInstructionBeforeUpdateMu.Lock()
		cancelInstructionBeforeUpdateHooks = append(cancelInstructionBeforeUpdateHooks, cancelInstructionHook)
		cancelInstructionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		cancelInstructionAfterUpdateMu.Lock()
		cancelInstructionAfterUpdateHooks = append(cancelInstructionAfterUpdateHooks, cancelInstructionHook)
		cancelInstructionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		cancelInstructionBeforeDeleteMu.Lock()
		cancelInstructionBeforeDeleteHooks = append(cancelInstructionBeforeDeleteHooks, cancelInstructionHook)
		cancelInstructionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		cancelInstructionAfterDeleteMu.Lock()
		cancelInstructionAfterDeleteHooks = append(cancelInstructionAfterDeleteHooks, cancelInstructionHook)
		cancelInstructionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		cancelInstructionBeforeUpsertMu.Lock()
		cancelInstructionBeforeUpsertHooks = append(cancelInstructionBeforeUpsertHooks, cancelInstructionHook)
		cancelInstructionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		cancelInstructionAfterUpsertMu.Lock()
		cancelInstructionAfterUpsertHooks = append(cancelInstructionAfterUpsertHooks, cancelInstructionHook)
		cancelInstructionAfterUpsertMu.Unlock()
	}
}

// OneG returns a single cancelInstruction record from the query using the global executor.
func (q cancelInstructionQuery) OneG(ctx context.Context) (*CancelInstruction, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single cancelInstruction record from the query.
func (q cancelInstructionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CancelInstruction, error) {
	o := &CancelInstruction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "ordersdb: failed to execute a one query for cancel_instructions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CancelInstruction records from the query using the global executor.
func (q cancelInstructionQuery) AllG(ctx context.Context) (CancelInstructionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CancelInstruction records from the query.
func (q cancelInstructionQuery) All(ctx context.Context, exec boil.ContextExecutor) (CancelInstructionSlice, error) {
	var o []*CancelInstruction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "ordersdb: failed to assign all query results to CancelInstruction slice")
	}

	if len(cancelInstructionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CancelInstruction records in the query using the global executor
func (q cancelInstructionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CancelInstruction records in the query.
func (q cancelInstructionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: failed to count cancel_instructions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q cancelInstructionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q cancelInstructionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "ordersdb: failed to check if cancel_instructions exists")
	}

	return count > 0, nil
}

// CancelInstructions retrieves all the records using an executor.
func CancelInstructions(mods ...qm.QueryMod) cancelInstructionQuery {
	mods = append(mods, qm.From("\"orders\".\"cancel_instructions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"orders\".\"cancel_instructions\".*"})
	}

	return cancelInstructionQuery{q}
}

// FindCancelInstructionG retrieves a single record by ID.
func FindCancelInstructionG(ctx context.Context, cancelNo int, selectCols ...string) (*CancelInstruction, error) {
	return FindCancelInstruction(ctx, boil.GetContextDB(), cancelNo, selectCols...)
}

// FindCancelInstruction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCancelInstruction(ctx context.Context, exec boil.ContextExecutor, cancelNo int, selectCols ...string) (*CancelInstruction, error) {
	cancelInstructionObj := &CancelInstruction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"orders\".\"cancel_instructions\" where \"cancel_no\"=$1", sel,
	)

	q := queries.Raw(query, cancelNo)

	err := q.Bind(ctx, exec, cancelInstructionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "ordersdb: unable to select from cancel_instructions")
	}

	if err = cancelInstructionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cancelInstructionObj, err
	}

	return cancelInstructionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CancelInstruction) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CancelInstruction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("ordersdb: no cancel_instructions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cancelInstructionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cancelInstructionInsertCacheMut.RLock()
	cache, cached := cancelInstructionInsertCache[key]
	cancelInstructionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cancelInstructionAllColumns,
			cancelInstructionColumnsWithDefault,
			cancelInstructionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cancelInstructionType, cancelInstructionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cancelInstructionType, cancelInstructionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"orders\".\"cancel_instructions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"orders\".\"cancel_instructions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "ordersdb: unable to insert into cancel_instructions")
	}

	if !cached {
		cancelInstructionInsertCacheMut.Lock()
		cancelInstructionInsertCache[key] = cache
		cancelInstructionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CancelInstruction record using the global executor.
// See Update for more documentation.
func (o *CancelInstruction) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CancelInstruction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CancelInstruction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cancelInstructionUpdateCacheMut.RLock()
	cache, cached := cancelInstructionUpdateCache[key]
	cancelInstructionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cancelInstructionAllColumns,
			cancelInstructionPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("ordersdb: unable to update cancel_instructions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"orders\".\"cancel_instructions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cancelInstructionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cancelInstructionType, cancelInstructionMapping, append(wl, cancelInstructionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to update cancel_instructions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: failed to get rows affected by update for cancel_instructions")
	}

	if !cached {
		cancelInstructionUpdateCacheMut.Lock()
		cancelInstructionUpdateCache[key] = cache
		cancelInstructionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q cancelInstructionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q cancelInstructionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to update all for cancel_instructions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to retrieve rows affected for cancel_instructions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CancelInstructionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CancelInstructionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("ordersdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cancelInstructionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"orders\".\"cancel_instructions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cancelInstructionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to update all in cancelInstruction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to retrieve rows affected all in update all cancelInstruction")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CancelInstruction) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CancelInstruction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("ordersdb: no cancel_instructions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cancelInstructionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cancelInstructionUpsertCacheMut.RLock()
	cache, cached := cancelInstructionUpsertCache[key]
	cancelInstructionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			cancelInstructionAllColumns,
			cancelInstructionColumnsWithDefault,
			cancelInstructionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cancelInstructionAllColumns,
			cancelInstructionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("ordersdb: unable to upsert cancel_instructions, could not build update column list")
		}

		ret := strmangle.SetComplement(cancelInstructionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(cancelInstructionPrimaryKeyColumns) == 0 {
				return errors.New("ordersdb: unable to upsert cancel_instructions, could not build conflict column list")
			}

			conflict = make([]string, len(cancelInstructionPrimaryKeyColumns))
			copy(conflict, cancelInstructionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"orders\".\"cancel_instructions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(cancelInstructionType, cancelInstructionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cancelInstructionType, cancelInstructionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "ordersdb: unable to upsert cancel_instructions")
	}

	if !cached {
		cancelInstructionUpsertCacheMut.Lock()
		cancelInstructionUpsertCache[key] = cache
		cancelInstructionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CancelInstruction record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CancelInstruction) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CancelInstruction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CancelInstruction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("ordersdb: no CancelInstruction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cancelInstructionPrimaryKeyMapping)
	sql := "DELETE FROM \"orders\".\"cancel_instructions\" WHERE \"cancel_no\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to delete from cancel_instructions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: failed to get rows affected by delete for cancel_instructions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q cancelInstructionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q cancelInstructionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("ordersdb: no cancelInstructionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to delete all from cancel_instructions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: failed to get rows affected by deleteall for cancel_instructions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CancelInstructionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CancelInstructionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cancelInstructionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cancelInstructionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"orders\".\"cancel_instructions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cancelInstructionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to delete all from cancelInstruction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: failed to get rows affected by deleteall for cancel_instructions")
	}

	if len(cancelInstructionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CancelInstruction) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("ordersdb: no CancelInstruction provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CancelInstruction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCancelInstruction(ctx, exec, o.CancelNo)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CancelInstructionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("ordersdb: empty CancelInstructionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CancelInstructionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CancelInstructionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cancelInstructionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"orders\".\"cancel_instructions\".* FROM \"orders\".\"cancel_instructions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cancelInstructionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "ordersdb: unable to reload all in CancelInstructionSlice")
	}

	*o = slice

	return nil
}

// CancelInstructionExistsG checks if the CancelInstruction row exists.
func CancelInstructionExistsG(ctx context.Context, cancelNo int) (bool, error) {
	return CancelInstructionExists(ctx, boil.GetContextDB(), cancelNo)
}

// CancelInstructionExists checks if the CancelInstruction row exists.
func CancelInstructionExists(ctx context.Context, exec boil.ContextExecutor, cancelNo int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"orders\".\"cancel_instructions\" where \"cancel_no\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, cancelNo)
	}
	row := exec.QueryRowContext(ctx, sql, cancelNo)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "ordersdb: unable to check if cancel_instructions exists")
	}

	return exists, nil
}

// Exists checks if the CancelInstruction row exists.
func (o *CancelInstruction) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CancelInstructionExists(ctx, exec, o.CancelNo)
}

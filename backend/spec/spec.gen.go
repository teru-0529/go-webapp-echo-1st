// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaW1PbSBb+K6neeZipMliyzSV+yybsFDVZ8JKdmgeKpRQjQFO25EjtVFjKVZYcboEM",
	"hAkh5LIDCYEkDA4V2FxJ8mPasvHT/IWt7pZtXdq27GFmU7ObhxSyunW+c/o7l+7T0yCuJFOKLMpQA9Fp",
	"MCkKY6JK/kwocQFKioz/HhO1uCql6CMo3jk42VlG+l7hw4Pi/ArS15H+E8o9R8YHlDtGxluk578duggC",
	"QLwmJFMJEURBUIjHlbQMtWAoAgJAi0+KSQF/Gk6l8HsNqpI8ATKZAFDFpCDJ+MkreftB6ehR6d8rxX89",
	"QMZqQkpKsPD+VXHtAOm7WHDuGTK2CQKMqXzvPtL3ivlFlJsjyD4hfQnpBjIWzc0jc2Ue6XtQTYt2pPiZ",
	"ge+yoiREQQYZjDAlqEJShJah4mkNKklRHRCSohcyyq5Q1MWHW4X3r1D2lvlxvXh92ZyZN1dulnYPfjme",
	"N/NL5szTwpvsydzRL8cLIAAkPPVKWlSnQADI5MNVOaPk2Y7xC1UcB1Hwp2BtMYP0rRZ0oMPgidEam7a4",
	"dlB4c6O8sWJmt78ktltDxjOU20O5eTO7jfQXIe4ru9F4jmNjpsL8YqWjMUhlfFwT66JExnMC6T3K5Sgk",
	"NkonyFAdjJYsvyCt4QSlOiaqAwqeQT6cEuCk7bv47aisAEzpK2lJFce89Gooyfp8VdQlKMC05otjy+vF",
	"w6fEI2Yt5htv6/CK4tTot1vCZuHB+KAqxMX+saopaCCpCbnWAQU8pEMaa9seFRkZGiW0lCJrIjGHqKqK",
	"Olr5iTilIkNRJgwSUqmERGNZ8HuNBjR/AvvwZ6k4p8ErLyrICYjzghwXE/2yBtV0HA/8szI2xVgsYx/l",
	"HqPcIeHvXnFprrT9rrTxvrz00s7WaaCkRFWAihVXQHF/p3T7oPBpq/TDdWDjHhga7ODwv0gIBEBKVcbS",
	"cYhXAsQ4LhQGAXAlLchQglMgGsF2E4gNQHlr18w/Kuc+mCvzIENmpkQVStSiTuFNuGAf63QLX/R2oG48",
	"pzYwY9er8aTquExN/cYzZAWKVi6qEHW4qpYdbsBpKBumkUAldSiXvxfjEAuntGEw4ilOXLljlPuZuOxD",
	"wo63TjqMiVCQEiAKzsX6kbFq5n862VpC+gYyFotPn5U3VpCxWnywQDLfc6RfR7kd4vmv8P/6LtI3QABA",
	"CZJ0HOH4M9/KQhpOKqr0TxErgtFqOFOPK0rwsqAG+VDYy4sKCj/2q4rzOZgCaDw4rSZiOMq6F4dOZhl9",
	"SIyL0lVmOUGjJHDr6E7o/tNr4Nf7zQUBNp2oTWlkWFu+5sokvoO8rTAbxL/HVCkuNvdXPAgvrgKFRMvz",
	"6npgzVQeD3SsiFcwWw2nWRrS6JyqClP1uIT0fPn+LI6oNt8ddlMKmB8PzdcPSwvPSrcfFzefm8fLheN7",
	"pe2Pbm2ioPT2No365bXXDr2jIMSFIh0c38HxzHRQ+7my2OD84F9jF/v+3nehjhWioV48kbFa9EUm4NHE",
	"jt48fFU8enLy+APeFyxk21Am3MFH2MqEvMqcGzjfd7G+Liw1WBr4X4vCmxvFhwsnP28UPm0x4Uc6Qt1s",
	"+GEP/O8Gh74Z7R8YjQ0Nfj3Ud+lSPTXCEfaK8JEuvCIjASBBMdnUlWtRMFMlt0CYbOf2hWp0Z5G7ePeH",
	"0tGBN1ySuudvbSTjuKLB1sIIsWE7otqPeu3VJilVGZfgkI9gbhtpj7HtKKmJiYQkT7RmUm1SSqXaEuiK",
	"zo6qyLFODCEBN21Yqrs0shPGYeEWojdleMMYXqV5a45l+U4mAJKS3E+n8g18bdAKLuxdAoVibi8U7x+B",
	"0yvO3QnV/rKh3WKKBhshrW5gTq+UoqWm/wXAEO3L+6uqsUaG8tQYFaRNLdhWfG075rUXudoIIq0EAvvX",
	"fdrLn7fayy2XycLefXHIjSUajvTSCsc1mfdO7vJM5rnuSDvZ2EYK34HjOwlONiaSc+Pov96petywN6tz",
	"jnTNn+3FVYnLVF0+ihyXLUmVak+WXGfoLDMNRtw2D/UQDN78xZMqz4Wfd+AP9fYw8IcbFcxu4F0e4OEe",
	"JnDODTzS1c0GHmoOvCfMMjzfoDh24+72GrzbH26e40Js4IT5rRb7XfWq5a7utqtlnudD7A1MGGPP/Dfz",
	"06nlpv+fFHw2JwWNc/8ly1Gangmbc+9Obr52HQX/LxzInvoRa+NmnFVVz8wXjvXik31z5aajSUlTo7k2",
	"W3i36EqNSeHaRVGegJMg2sUF3F1LX101pOfN5Tvmx3V7e83TRUsK16RkOgmiIbLvT0oyfaxVBJIMxQlR",
	"xVLJ0alXS2PjJJtzaIYLpevL5Gx4B+nLSN9E+hrSrwOGKo17b/TcubhhID3v7cPZhdrRcyz0bkq7xC3O",
	"mB9+PMnO0DapQx1XbrEtTphKrT6y9Kt5A3Mns/bcXH7tEFdJTKSbYhPGO4Xhx5QAoajir/1jaLBjmOs4",
	"OzLdk/kC1MNRr6VnYbnxqnioYywytuIwKw/aUr29XIkN9cXODfUPfI3dpKaKfYgHUaoScJ1YynO3ylsO",
	"T+G7OAdXz9J/zRbcEVVc+q7Nmj/q/Rccdq/Uh3bnc1i8y2HwGDV3hG1u54mMS/r8s9L9G+Wtm0Hz8cvC",
	"xy0HjTtDvRGbrjxTSzmdvEyVtAdBF6PXDspzyw47hu0fdjo804KVfO799vqTwvu7DutVj1RxpTquqEkB",
	"gigYo6nQYx5bA9fdnXpJWlPzyNhBxi4ytpG+VNp4V+0+nezfNeefkLbmsQMAVigajXHdPeFesuGyr2Mv",
	"A0OluePFkLvl6oeBIFRSbm/0BmacYCR5vL6z57dKK7PnYv223hhJ9toZ+uNVUdXoBL6T6+SssCULKQlE",
	"QbiT7+QA4eAk8eEgLd47pFrCJ7+nFA3W3cDmF3Fm2L9rPnhKDWrf2CJjtbg0Z+bvWbGb1TxGxiotGuh0",
	"lDWqSVNSZFL4U508HWoN7z+B80LLMDt314bU+vAjNHuLtaOhU2m7sxvpjDY80xqe6wXuywIhjveuxXlV",
	"pI5R5wYUC681NFgdZ0EcF9IJWG9SFUrQdWmB3CZIJ5OCOtX0lgAUJrRqvQRG8NSgWtlnEOwTYl3COW5q",
	"GavWlZoKdaxXufny5izSX9hzItLz5Y2b5c3ZOvSq7nS0r8XWWWVd/gk0HVi5gNN8pGvH1vzLjl1Mi37g",
	"YBh3as7g6jsyvGDwGydtJW3UcYWuEXVrA0+Ru5QzhTfZk51dyi4GZQMNg6KLo/7CW41/n2VY856lMxaT",
	"qv8lVbi8OVO6n//qjxHRXH2CxiEsOF25PZdpEs2s0ORKk1mdySO6//LPowGlnUhW20d/ZiHEdnLMjiOZ",
	"AIhwEa+pBxR45i9KWh4Dp0wHuiCt0KF6uEHqqvTp8KLwKV/cf9wKLyrdu1j6d+THbxiTHN3I+nGJGsp/",
	"XGJy6cx5Cl37/flG8dfhW+Vc+7cr3+3nfL7TGuMU8fNMcPWOO1l0shniD5LeWEe4HpaR/qp6tbJg7l3u",
	"PolIeyi3V76zWNp4V1o9MB/lANkZgyiYhDAVDQanJxUNZqLTKUWFGbxHFVRJuJygxpqsctXSilglQX4m",
	"RZfqet3D8TwxhBfOOkGURcYLZLxGuV2UO2Qg0qLByjEw5gzRVQviHTImmmWCuo1K+yV0kBnJ/CcAAP//",
	"q+QsLJIyAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package ordersdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShippingInstruction is an object representing the database table.
type ShippingInstruction struct { // 出荷NO
	SippingNo int `boil:"sipping_no" json:"sipping_no" toml:"sipping_no" yaml:"sipping_no"`
	// 受注番号
	OrderNo string `boil:"order_no" json:"order_no" toml:"order_no" yaml:"order_no"`
	// 商品ID
	ProductID string `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	// 出荷日
	SippingDate time.Time `boil:"sipping_date" json:"sipping_date" toml:"sipping_date" yaml:"sipping_date"`
	// 処理担当者名
	OperatorName string `boil:"operator_name" json:"operator_name" toml:"operator_name" yaml:"operator_name"`
	// 出荷数
	ShippingQuantity int `boil:"shipping_quantity" json:"shipping_quantity" toml:"shipping_quantity" yaml:"shipping_quantity"`
	// 作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// 更新日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// 作成者
	CreatedBy null.String `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	// 更新者
	UpdatedBy null.String `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`

	R *shippingInstructionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shippingInstructionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShippingInstructionColumns = struct {
	SippingNo        string
	OrderNo          string
	ProductID        string
	SippingDate      string
	OperatorName     string
	ShippingQuantity string
	CreatedAt        string
	UpdatedAt        string
	CreatedBy        string
	UpdatedBy        string
}{
	SippingNo:        "sipping_no",
	OrderNo:          "order_no",
	ProductID:        "product_id",
	SippingDate:      "sipping_date",
	OperatorName:     "operator_name",
	ShippingQuantity: "shipping_quantity",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	CreatedBy:        "created_by",
	UpdatedBy:        "updated_by",
}

var ShippingInstructionTableColumns = struct {
	SippingNo        string
	OrderNo          string
	ProductID        string
	SippingDate      string
	OperatorName     string
	ShippingQuantity string
	CreatedAt        string
	UpdatedAt        string
	CreatedBy        string
	UpdatedBy        string
}{
	SippingNo:        "shipping_instructions.sipping_no",
	OrderNo:          "shipping_instructions.order_no",
	ProductID:        "shipping_instructions.product_id",
	SippingDate:      "shipping_instructions.sipping_date",
	OperatorName:     "shipping_instructions.operator_name",
	ShippingQuantity: "shipping_instructions.shipping_quantity",
	CreatedAt:        "shipping_instructions.created_at",
	UpdatedAt:        "shipping_instructions.updated_at",
	CreatedBy:        "shipping_instructions.created_by",
	UpdatedBy:        "shipping_instructions.updated_by",
}

// Generated where

var ShippingInstructionWhere = struct {
	SippingNo        whereHelperint
	OrderNo          whereHelperstring
	ProductID        whereHelperstring
	SippingDate      whereHelpertime_Time
	OperatorName     whereHelperstring
	ShippingQuantity whereHelperint
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	CreatedBy        whereHelpernull_String
	UpdatedBy        whereHelpernull_String
}{
	SippingNo:        whereHelperint{field: "\"orders\".\"shipping_instructions\".\"sipping_no\""},
	OrderNo:          whereHelperstring{field: "\"orders\".\"shipping_instructions\".\"order_no\""},
	ProductID:        whereHelperstring{field: "\"orders\".\"shipping_instructions\".\"product_id\""},
	SippingDate:      whereHelpertime_Time{field: "\"orders\".\"shipping_instructions\".\"sipping_date\""},
	OperatorName:     whereHelperstring{field: "\"orders\".\"shipping_instructions\".\"operator_name\""},
	ShippingQuantity: whereHelperint{field: "\"orders\".\"shipping_instructions\".\"shipping_quantity\""},
	CreatedAt:        whereHelpertime_Time{field: "\"orders\".\"shipping_instructions\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"orders\".\"shipping_instructions\".\"updated_at\""},
	CreatedBy:        whereHelpernull_String{field: "\"orders\".\"shipping_instructions\".\"created_by\""},
	UpdatedBy:        whereHelpernull_String{field: "\"orders\".\"shipping_instructions\".\"updated_by\""},
}

// ShippingInstructionRels is where relationship names are stored.
var ShippingInstructionRels = struct {
}{}

// shippingInstructionR is where relationships are stored.
type shippingInstructionR struct {
}

// NewStruct creates a new relationship struct
func (*shippingInstructionR) NewStruct() *shippingInstructionR {
	return &shippingInstructionR{}
}

// shippingInstructionL is where Load methods for each relationship are stored.
type shippingInstructionL struct{}

var (
	shippingInstructionAllColumns            = []string{"sipping_no", "order_no", "product_id", "sipping_date", "operator_name", "shipping_quantity", "created_at", "updated_at", "created_by", "updated_by"}
	shippingInstructionColumnsWithoutDefault = []string{"order_no", "product_id", "operator_name"}
	shippingInstructionColumnsWithDefault    = []string{"sipping_no", "sipping_date", "shipping_quantity", "created_at", "updated_at", "created_by", "updated_by"}
	shippingInstructionPrimaryKeyColumns     = []string{"sipping_no"}
	shippingInstructionGeneratedColumns      = []string{}
)

type (
	// ShippingInstructionSlice is an alias for a slice of pointers to ShippingInstruction.
	// This should almost always be used instead of []ShippingInstruction.
	ShippingInstructionSlice []*ShippingInstruction
	// ShippingInstructionHook is the signature for custom ShippingInstruction hook methods
	ShippingInstructionHook func(context.Context, boil.ContextExecutor, *ShippingInstruction) error

	shippingInstructionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shippingInstructionType                 = reflect.TypeOf(&ShippingInstruction{})
	shippingInstructionMapping              = queries.MakeStructMapping(shippingInstructionType)
	shippingInstructionPrimaryKeyMapping, _ = queries.BindMapping(shippingInstructionType, shippingInstructionMapping, shippingInstructionPrimaryKeyColumns)
	shippingInstructionInsertCacheMut       sync.RWMutex
	shippingInstructionInsertCache          = make(map[string]insertCache)
	shippingInstructionUpdateCacheMut       sync.RWMutex
	shippingInstructionUpdateCache          = make(map[string]updateCache)
	shippingInstructionUpsertCacheMut       sync.RWMutex
	shippingInstructionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shippingInstructionAfterSelectMu sync.Mutex
var shippingInstructionAfterSelectHooks []ShippingInstructionHook

var shippingInstructionBeforeInsertMu sync.Mutex
var shippingInstructionBeforeInsertHooks []ShippingInstructionHook
var shippingInstructionAfterInsertMu sync.Mutex
var shippingInstructionAfterInsertHooks []ShippingInstructionHook

var shippingInstructionBeforeUpdateMu sync.Mutex
var shippingInstructionBeforeUpdateHooks []ShippingInstructionHook
var shippingInstructionAfterUpdateMu sync.Mutex
var shippingInstructionAfterUpdateHooks []ShippingInstructionHook

var shippingInstructionBeforeDeleteMu sync.Mutex
var shippingInstructionBeforeDeleteHooks []ShippingInstructionHook
var shippingInstructionAfterDeleteMu sync.Mutex
var shippingInstructionAfterDeleteHooks []ShippingInstructionHook

var shippingInstructionBeforeUpsertMu sync.Mutex
var shippingInstructionBeforeUpsertHooks []ShippingInstructionHook
var shippingInstructionAfterUpsertMu sync.Mutex
var shippingInstructionAfterUpsertHooks []ShippingInstructionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShippingInstruction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingInstructionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShippingInstruction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingInstructionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShippingInstruction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingInstructionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShippingInstruction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingInstructionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShippingInstruction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingInstructionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShippingInstruction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingInstructionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShippingInstruction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingInstructionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShippingInstruction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingInstructionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShippingInstruction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingInstructionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShippingInstructionHook registers your hook function for all future operations.
func AddShippingInstructionHook(hookPoint boil.HookPoint, shippingInstructionHook ShippingInstructionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shippingInstructionAfterSelectMu.Lock()
		shippingInstructionAfterSelectHooks = append(shippingInstructionAfterSelectHooks, shippingInstructionHook)
		shippingInstructionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		shippingInstructionBeforeInsertMu.Lock()
		shippingInstructionBeforeInsertHooks = append(shippingInstructionBeforeInsertHooks, shippingInstructionHook)
		shippingInstructionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		shippingInstructionAfterInsertMu.Lock()
		shippingInstructionAfterInsertHooks = append(shippingInstructionAfterInsertHooks, shippingInstructionHook)
		shippingInstructionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		shippingInstructionBeforeUpdateMu.Lock()
		shippingInstructionBeforeUpdateHooks = append(shippingInstructionBeforeUpdateHooks, shippingInstructionHook)
		shippingInstructionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		shippingInstructionAfterUpdateMu.Lock()
		shippingInstructionAfterUpdateHooks = append(shippingInstructionAfterUpdateHooks, shippingInstructionHook)
		shippingInstructionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		shippingInstructionBeforeDeleteMu.Lock()
		shippingInstructionBeforeDeleteHooks = append(shippingInstructionBeforeDeleteHooks, shippingInstructionHook)
		shippingInstructionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		shippingInstructionAfterDeleteMu.Lock()
		shippingInstructionAfterDeleteHooks = append(shippingInstructionAfterDeleteHooks, shippingInstructionHook)
		shippingInstructionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		shippingInstructionBeforeUpsertMu.Lock()
		shippingInstructionBeforeUpsertHooks = append(shippingInstructionBeforeUpsertHooks, shippingInstructionHook)
		shippingInstructionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		shippingInstructionAfterUpsertMu.Lock()
		shippingInstructionAfterUpsertHooks = append(shippingInstructionAfterUpsertHooks, shippingInstructionHook)
		shippingInstructionAfterUpsertMu.Unlock()
	}
}

// OneG returns a single shippingInstruction record from the query using the global executor.
func (q shippingInstructionQuery) OneG(ctx context.Context) (*ShippingInstruction, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single shippingInstruction record from the query.
func (q shippingInstructionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShippingInstruction, error) {
	o := &ShippingInstruction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "ordersdb: failed to execute a one query for shipping_instructions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ShippingInstruction records from the query using the global executor.
func (q shippingInstructionQuery) AllG(ctx context.Context) (ShippingInstructionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ShippingInstruction records from the query.
func (q shippingInstructionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShippingInstructionSlice, error) {
	var o []*ShippingInstruction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "ordersdb: failed to assign all query results to ShippingInstruction slice")
	}

	if len(shippingInstructionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ShippingInstruction records in the query using the global executor
func (q shippingInstructionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ShippingInstruction records in the query.
func (q shippingInstructionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: failed to count shipping_instructions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q shippingInstructionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q shippingInstructionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "ordersdb: failed to check if shipping_instructions exists")
	}

	return count > 0, nil
}

// ShippingInstructions retrieves all the records using an executor.
func ShippingInstructions(mods ...qm.QueryMod) shippingInstructionQuery {
	mods = append(mods, qm.From("\"orders\".\"shipping_instructions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"orders\".\"shipping_instructions\".*"})
	}

	return shippingInstructionQuery{q}
}

// FindShippingInstructionG retrieves a single record by ID.
func FindShippingInstructionG(ctx context.Context, sippingNo int, selectCols ...string) (*ShippingInstruction, error) {
	return FindShippingInstruction(ctx, boil.GetContextDB(), sippingNo, selectCols...)
}

// FindShippingInstruction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShippingInstruction(ctx context.Context, exec boil.ContextExecutor, sippingNo int, selectCols ...string) (*ShippingInstruction, error) {
	shippingInstructionObj := &ShippingInstruction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"orders\".\"shipping_instructions\" where \"sipping_no\"=$1", sel,
	)

	q := queries.Raw(query, sippingNo)

	err := q.Bind(ctx, exec, shippingInstructionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "ordersdb: unable to select from shipping_instructions")
	}

	if err = shippingInstructionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shippingInstructionObj, err
	}

	return shippingInstructionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ShippingInstruction) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShippingInstruction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("ordersdb: no shipping_instructions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingInstructionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shippingInstructionInsertCacheMut.RLock()
	cache, cached := shippingInstructionInsertCache[key]
	shippingInstructionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shippingInstructionAllColumns,
			shippingInstructionColumnsWithDefault,
			shippingInstructionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shippingInstructionType, shippingInstructionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shippingInstructionType, shippingInstructionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"orders\".\"shipping_instructions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"orders\".\"shipping_instructions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "ordersdb: unable to insert into shipping_instructions")
	}

	if !cached {
		shippingInstructionInsertCacheMut.Lock()
		shippingInstructionInsertCache[key] = cache
		shippingInstructionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ShippingInstruction record using the global executor.
// See Update for more documentation.
func (o *ShippingInstruction) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ShippingInstruction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShippingInstruction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shippingInstructionUpdateCacheMut.RLock()
	cache, cached := shippingInstructionUpdateCache[key]
	shippingInstructionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shippingInstructionAllColumns,
			shippingInstructionPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("ordersdb: unable to update shipping_instructions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"orders\".\"shipping_instructions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shippingInstructionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shippingInstructionType, shippingInstructionMapping, append(wl, shippingInstructionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to update shipping_instructions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: failed to get rows affected by update for shipping_instructions")
	}

	if !cached {
		shippingInstructionUpdateCacheMut.Lock()
		shippingInstructionUpdateCache[key] = cache
		shippingInstructionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q shippingInstructionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q shippingInstructionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to update all for shipping_instructions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to retrieve rows affected for shipping_instructions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ShippingInstructionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShippingInstructionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("ordersdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingInstructionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"orders\".\"shipping_instructions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shippingInstructionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to update all in shippingInstruction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to retrieve rows affected all in update all shippingInstruction")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ShippingInstruction) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShippingInstruction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("ordersdb: no shipping_instructions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingInstructionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shippingInstructionUpsertCacheMut.RLock()
	cache, cached := shippingInstructionUpsertCache[key]
	shippingInstructionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			shippingInstructionAllColumns,
			shippingInstructionColumnsWithDefault,
			shippingInstructionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shippingInstructionAllColumns,
			shippingInstructionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("ordersdb: unable to upsert shipping_instructions, could not build update column list")
		}

		ret := strmangle.SetComplement(shippingInstructionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(shippingInstructionPrimaryKeyColumns) == 0 {
				return errors.New("ordersdb: unable to upsert shipping_instructions, could not build conflict column list")
			}

			conflict = make([]string, len(shippingInstructionPrimaryKeyColumns))
			copy(conflict, shippingInstructionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"orders\".\"shipping_instructions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(shippingInstructionType, shippingInstructionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shippingInstructionType, shippingInstructionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "ordersdb: unable to upsert shipping_instructions")
	}

	if !cached {
		shippingInstructionUpsertCacheMut.Lock()
		shippingInstructionUpsertCache[key] = cache
		shippingInstructionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ShippingInstruction record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ShippingInstruction) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ShippingInstruction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShippingInstruction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("ordersdb: no ShippingInstruction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shippingInstructionPrimaryKeyMapping)
	sql := "DELETE FROM \"orders\".\"shipping_instructions\" WHERE \"sipping_no\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to delete from shipping_instructions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: failed to get rows affected by delete for shipping_instructions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q shippingInstructionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q shippingInstructionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("ordersdb: no shippingInstructionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to delete all from shipping_instructions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: failed to get rows affected by deleteall for shipping_instructions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ShippingInstructionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShippingInstructionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shippingInstructionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingInstructionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"orders\".\"shipping_instructions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingInstructionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: unable to delete all from shippingInstruction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ordersdb: failed to get rows affected by deleteall for shipping_instructions")
	}

	if len(shippingInstructionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ShippingInstruction) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("ordersdb: no ShippingInstruction provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShippingInstruction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShippingInstruction(ctx, exec, o.SippingNo)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShippingInstructionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("ordersdb: empty ShippingInstructionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShippingInstructionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShippingInstructionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingInstructionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"orders\".\"shipping_instructions\".* FROM \"orders\".\"shipping_instructions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingInstructionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "ordersdb: unable to reload all in ShippingInstructionSlice")
	}

	*o = slice

	return nil
}

// ShippingInstructionExistsG checks if the ShippingInstruction row exists.
func ShippingInstructionExistsG(ctx context.Context, sippingNo int) (bool, error) {
	return ShippingInstructionExists(ctx, boil.GetContextDB(), sippingNo)
}

// ShippingInstructionExists checks if the ShippingInstruction row exists.
func ShippingInstructionExists(ctx context.Context, exec boil.ContextExecutor, sippingNo int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"orders\".\"shipping_instructions\" where \"sipping_no\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, sippingNo)
	}
	row := exec.QueryRowContext(ctx, sql, sippingNo)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "ordersdb: unable to check if shipping_instructions exists")
	}

	return exists, nil
}

// Exists checks if the ShippingInstruction row exists.
func (o *ShippingInstruction) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShippingInstructionExists(ctx, exec, o.SippingNo)
}
